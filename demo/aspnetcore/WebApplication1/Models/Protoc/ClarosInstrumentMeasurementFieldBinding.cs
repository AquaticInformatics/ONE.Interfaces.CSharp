// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: claros_instrument_measurement_field_binding.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace claros.protoc.Instrument {

  /// <summary>Holder for reflection information generated from claros_instrument_measurement_field_binding.proto</summary>
  public static partial class ClarosInstrumentMeasurementFieldBindingReflection {

    #region Descriptor
    /// <summary>File descriptor for claros_instrument_measurement_field_binding.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClarosInstrumentMeasurementFieldBindingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFjbGFyb3NfaW5zdHJ1bWVudF9tZWFzdXJlbWVudF9maWVsZF9iaW5kaW5n",
            "LnByb3RvEhFjbGFyb3MuaW5zdHJ1bWVudBonY2xhcm9zX2NvbW1vbl9jb3Jl",
            "X2NsYXJvc2RhdGV0aW1lLnByb3RvIosBCiFJbnN0cnVtZW50TWVhc3VyZW1l",
            "bnRGaWVsZEJpbmRpbmcSHwoXaW5zdHJ1bWVudE1lYXN1cmVtZW50SWQYASAB",
            "KAkSNQoJdGltZXN0YW1wGAIgASgLMiIuY2xhcm9zLmNvbW1vbi5jb3JlLkNs",
            "YXJvc0RhdGVUaW1lEg4KBnVuaXRJZBgDIAEoDWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::claros.protoc.Common.Core.ClarosCommonCoreClarosdatetimeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::claros.protoc.Instrument.InstrumentMeasurementFieldBinding), global::claros.protoc.Instrument.InstrumentMeasurementFieldBinding.Parser, new[]{ "InstrumentMeasurementId", "Timestamp", "UnitId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InstrumentMeasurementFieldBinding : pb::IMessage<InstrumentMeasurementFieldBinding> {
    private static readonly pb::MessageParser<InstrumentMeasurementFieldBinding> _parser = new pb::MessageParser<InstrumentMeasurementFieldBinding>(() => new InstrumentMeasurementFieldBinding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstrumentMeasurementFieldBinding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::claros.protoc.Instrument.ClarosInstrumentMeasurementFieldBindingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentMeasurementFieldBinding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentMeasurementFieldBinding(InstrumentMeasurementFieldBinding other) : this() {
      instrumentMeasurementId_ = other.instrumentMeasurementId_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      unitId_ = other.unitId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentMeasurementFieldBinding Clone() {
      return new InstrumentMeasurementFieldBinding(this);
    }

    /// <summary>Field number for the "instrumentMeasurementId" field.</summary>
    public const int InstrumentMeasurementIdFieldNumber = 1;
    private string instrumentMeasurementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentMeasurementId {
      get { return instrumentMeasurementId_; }
      set {
        instrumentMeasurementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private global::claros.protoc.Common.Core.ClarosDateTime timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::claros.protoc.Common.Core.ClarosDateTime Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "unitId" field.</summary>
    public const int UnitIdFieldNumber = 3;
    private uint unitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstrumentMeasurementFieldBinding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstrumentMeasurementFieldBinding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentMeasurementId != other.InstrumentMeasurementId) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (UnitId != other.UnitId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstrumentMeasurementId.Length != 0) hash ^= InstrumentMeasurementId.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (UnitId != 0) hash ^= UnitId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstrumentMeasurementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstrumentMeasurementId);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (UnitId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UnitId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstrumentMeasurementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentMeasurementId);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstrumentMeasurementFieldBinding other) {
      if (other == null) {
        return;
      }
      if (other.InstrumentMeasurementId.Length != 0) {
        InstrumentMeasurementId = other.InstrumentMeasurementId;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::claros.protoc.Common.Core.ClarosDateTime();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.UnitId != 0) {
        UnitId = other.UnitId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstrumentMeasurementId = input.ReadString();
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              Timestamp = new global::claros.protoc.Common.Core.ClarosDateTime();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 24: {
            UnitId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
