// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: claros_common_core_limit.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace claros.protoc.Common.Core {

  /// <summary>Holder for reflection information generated from claros_common_core_limit.proto</summary>
  public static partial class ClarosCommonCoreLimitReflection {

    #region Descriptor
    /// <summary>File descriptor for claros_common_core_limit.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClarosCommonCoreLimitReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5jbGFyb3NfY29tbW9uX2NvcmVfbGltaXQucHJvdG8SEmNsYXJvcy5jb21t",
            "b24uY29yZRojY2xhcm9zX2NvbW1vbl9jb3JlX2xpbWl0X3R5cGUucHJvdG8a",
            "I2NsYXJvc19jb21tb25fY29yZV9yZWN1cnJlbmNlLnByb3RvIp0BCgVMaW1p",
            "dBIPCgdpMThuS2V5GAEgASgJEjAKCWxpbWl0VHlwZRgCIAEoDjIdLmNsYXJv",
            "cy5jb21tb24uY29yZS5MaW1pdFR5cGUSDQoFdmFsdWUYAyABKAESDgoGdW5p",
            "dElkGAQgASgNEjIKCnJlY3VycmVuY2UYBSABKAsyHi5jbGFyb3MuY29tbW9u",
            "LmNvcmUuUmVjdXJyZW5jZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::claros.protoc.Common.Core.ClarosCommonCoreLimitTypeReflection.Descriptor, global::claros.protoc.Common.Core.ClarosCommonCoreRecurrenceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::claros.protoc.Common.Core.Limit), global::claros.protoc.Common.Core.Limit.Parser, new[]{ "I18NKey", "LimitType", "Value", "UnitId", "Recurrence" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Limit : pb::IMessage<Limit> {
    private static readonly pb::MessageParser<Limit> _parser = new pb::MessageParser<Limit>(() => new Limit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Limit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::claros.protoc.Common.Core.ClarosCommonCoreLimitReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Limit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Limit(Limit other) : this() {
      i18NKey_ = other.i18NKey_;
      limitType_ = other.limitType_;
      value_ = other.value_;
      unitId_ = other.unitId_;
      recurrence_ = other.recurrence_ != null ? other.recurrence_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Limit Clone() {
      return new Limit(this);
    }

    /// <summary>Field number for the "i18nKey" field.</summary>
    public const int I18NKeyFieldNumber = 1;
    private string i18NKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string I18NKey {
      get { return i18NKey_; }
      set {
        i18NKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limitType" field.</summary>
    public const int LimitTypeFieldNumber = 2;
    private global::claros.protoc.Common.Core.LimitType limitType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::claros.protoc.Common.Core.LimitType LimitType {
      get { return limitType_; }
      set {
        limitType_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "unitId" field.</summary>
    public const int UnitIdFieldNumber = 4;
    private uint unitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "recurrence" field.</summary>
    public const int RecurrenceFieldNumber = 5;
    private global::claros.protoc.Common.Core.Recurrence recurrence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::claros.protoc.Common.Core.Recurrence Recurrence {
      get { return recurrence_; }
      set {
        recurrence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Limit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Limit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (I18NKey != other.I18NKey) return false;
      if (LimitType != other.LimitType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      if (UnitId != other.UnitId) return false;
      if (!object.Equals(Recurrence, other.Recurrence)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (I18NKey.Length != 0) hash ^= I18NKey.GetHashCode();
      if (LimitType != 0) hash ^= LimitType.GetHashCode();
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (UnitId != 0) hash ^= UnitId.GetHashCode();
      if (recurrence_ != null) hash ^= Recurrence.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (I18NKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(I18NKey);
      }
      if (LimitType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LimitType);
      }
      if (Value != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Value);
      }
      if (UnitId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UnitId);
      }
      if (recurrence_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Recurrence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (I18NKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(I18NKey);
      }
      if (LimitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LimitType);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
      }
      if (recurrence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Recurrence);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Limit other) {
      if (other == null) {
        return;
      }
      if (other.I18NKey.Length != 0) {
        I18NKey = other.I18NKey;
      }
      if (other.LimitType != 0) {
        LimitType = other.LimitType;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.UnitId != 0) {
        UnitId = other.UnitId;
      }
      if (other.recurrence_ != null) {
        if (recurrence_ == null) {
          Recurrence = new global::claros.protoc.Common.Core.Recurrence();
        }
        Recurrence.MergeFrom(other.Recurrence);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            I18NKey = input.ReadString();
            break;
          }
          case 16: {
            LimitType = (global::claros.protoc.Common.Core.LimitType) input.ReadEnum();
            break;
          }
          case 25: {
            Value = input.ReadDouble();
            break;
          }
          case 32: {
            UnitId = input.ReadUInt32();
            break;
          }
          case 42: {
            if (recurrence_ == null) {
              Recurrence = new global::claros.protoc.Common.Core.Recurrence();
            }
            input.ReadMessage(Recurrence);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
