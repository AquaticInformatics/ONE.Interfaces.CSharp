// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: claros_instrument_measurement_binding.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace claros.protoc.Instrument {

  /// <summary>Holder for reflection information generated from claros_instrument_measurement_binding.proto</summary>
  public static partial class ClarosInstrumentMeasurementBindingReflection {

    #region Descriptor
    /// <summary>File descriptor for claros_instrument_measurement_binding.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClarosInstrumentMeasurementBindingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitjbGFyb3NfaW5zdHJ1bWVudF9tZWFzdXJlbWVudF9iaW5kaW5nLnByb3Rv",
            "EhFjbGFyb3MuaW5zdHJ1bWVudBonY2xhcm9zX2NvbW1vbl9jb3JlX2FnZ3Jl",
            "Z2F0ZV90eXBlLnByb3RvIokBChxJbnN0cnVtZW50TWVhc3VyZW1lbnRCaW5k",
            "aW5nEh8KF2luc3RydW1lbnRNZWFzdXJlbWVudElkGAEgASgJEjgKDWFnZ3Jl",
            "Z2F0ZVR5cGUYAiABKA4yIS5jbGFyb3MuY29tbW9uLmNvcmUuQWdncmVnYXRl",
            "VHlwZRIOCgZ1bml0SWQYAyABKA1iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::claros.protoc.Common.Core.ClarosCommonCoreAggregateTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::claros.protoc.Instrument.InstrumentMeasurementBinding), global::claros.protoc.Instrument.InstrumentMeasurementBinding.Parser, new[]{ "InstrumentMeasurementId", "AggregateType", "UnitId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InstrumentMeasurementBinding : pb::IMessage<InstrumentMeasurementBinding> {
    private static readonly pb::MessageParser<InstrumentMeasurementBinding> _parser = new pb::MessageParser<InstrumentMeasurementBinding>(() => new InstrumentMeasurementBinding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstrumentMeasurementBinding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::claros.protoc.Instrument.ClarosInstrumentMeasurementBindingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentMeasurementBinding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentMeasurementBinding(InstrumentMeasurementBinding other) : this() {
      instrumentMeasurementId_ = other.instrumentMeasurementId_;
      aggregateType_ = other.aggregateType_;
      unitId_ = other.unitId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentMeasurementBinding Clone() {
      return new InstrumentMeasurementBinding(this);
    }

    /// <summary>Field number for the "instrumentMeasurementId" field.</summary>
    public const int InstrumentMeasurementIdFieldNumber = 1;
    private string instrumentMeasurementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentMeasurementId {
      get { return instrumentMeasurementId_; }
      set {
        instrumentMeasurementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aggregateType" field.</summary>
    public const int AggregateTypeFieldNumber = 2;
    private global::claros.protoc.Common.Core.AggregateType aggregateType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::claros.protoc.Common.Core.AggregateType AggregateType {
      get { return aggregateType_; }
      set {
        aggregateType_ = value;
      }
    }

    /// <summary>Field number for the "unitId" field.</summary>
    public const int UnitIdFieldNumber = 3;
    private uint unitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstrumentMeasurementBinding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstrumentMeasurementBinding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentMeasurementId != other.InstrumentMeasurementId) return false;
      if (AggregateType != other.AggregateType) return false;
      if (UnitId != other.UnitId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstrumentMeasurementId.Length != 0) hash ^= InstrumentMeasurementId.GetHashCode();
      if (AggregateType != 0) hash ^= AggregateType.GetHashCode();
      if (UnitId != 0) hash ^= UnitId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstrumentMeasurementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstrumentMeasurementId);
      }
      if (AggregateType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AggregateType);
      }
      if (UnitId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UnitId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstrumentMeasurementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentMeasurementId);
      }
      if (AggregateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AggregateType);
      }
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstrumentMeasurementBinding other) {
      if (other == null) {
        return;
      }
      if (other.InstrumentMeasurementId.Length != 0) {
        InstrumentMeasurementId = other.InstrumentMeasurementId;
      }
      if (other.AggregateType != 0) {
        AggregateType = other.AggregateType;
      }
      if (other.UnitId != 0) {
        UnitId = other.UnitId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstrumentMeasurementId = input.ReadString();
            break;
          }
          case 16: {
            AggregateType = (global::claros.protoc.Common.Core.AggregateType) input.ReadEnum();
            break;
          }
          case 24: {
            UnitId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
