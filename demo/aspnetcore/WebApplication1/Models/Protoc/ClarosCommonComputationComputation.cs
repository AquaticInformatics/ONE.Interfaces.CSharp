// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: claros_common_computation_computation.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace claros.protoc.Common.Computation {

  /// <summary>Holder for reflection information generated from claros_common_computation_computation.proto</summary>
  public static partial class ClarosCommonComputationComputationReflection {

    #region Descriptor
    /// <summary>File descriptor for claros_common_computation_computation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClarosCommonComputationComputationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitjbGFyb3NfY29tbW9uX2NvbXB1dGF0aW9uX2NvbXB1dGF0aW9uLnByb3Rv",
            "EhljbGFyb3MuY29tbW9uLmNvbXB1dGF0aW9uGihjbGFyb3NfY29tbW9uX2Nv",
            "bXB1dGF0aW9uX3ZhcmlhYmxlLnByb3RvGi5jbGFyb3NfY29tbW9uX2NvbXB1",
            "dGF0aW9uX2V4cHJlc3Npb25saW5lLnByb3RvItQCCgtDb21wdXRhdGlvbhIP",
            "CgdpMThuS2V5GAEgASgJEgwKBG5hbWUYAiABKAkSEwoLZGVzY3JpcHRpb24Y",
            "AyABKAkSOwoOaW5wdXRWYXJpYWJsZXMYBCADKAsyIy5jbGFyb3MuY29tbW9u",
            "LmNvbXB1dGF0aW9uLlZhcmlhYmxlEjwKD291dHB1dFZhcmlhYmxlcxgFIAMo",
            "CzIjLmNsYXJvcy5jb21tb24uY29tcHV0YXRpb24uVmFyaWFibGUSQgoPZXhw",
            "cmVzc2lvbkxpbmVzGAYgAygLMikuY2xhcm9zLmNvbW1vbi5jb21wdXRhdGlv",
            "bi5FeHByZXNzaW9uTGluZRIQCghpc0FjdGl2ZRgHIAEoCBIPCgdpc1ZhbGlk",
            "GAggASgIEhIKCGxlZGdlcklkGAkgASgJSAASEAoGZm9ybUlkGAogASgJSABC",
            "CQoHYmluZGluZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::claros.protoc.Common.Computation.ClarosCommonComputationVariableReflection.Descriptor, global::claros.protoc.Common.Computation.ClarosCommonComputationExpressionlineReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::claros.protoc.Common.Computation.Computation), global::claros.protoc.Common.Computation.Computation.Parser, new[]{ "I18NKey", "Name", "Description", "InputVariables", "OutputVariables", "ExpressionLines", "IsActive", "IsValid", "LedgerId", "FormId" }, new[]{ "Binding" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Computation : pb::IMessage<Computation> {
    private static readonly pb::MessageParser<Computation> _parser = new pb::MessageParser<Computation>(() => new Computation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Computation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::claros.protoc.Common.Computation.ClarosCommonComputationComputationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Computation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Computation(Computation other) : this() {
      i18NKey_ = other.i18NKey_;
      name_ = other.name_;
      description_ = other.description_;
      inputVariables_ = other.inputVariables_.Clone();
      outputVariables_ = other.outputVariables_.Clone();
      expressionLines_ = other.expressionLines_.Clone();
      isActive_ = other.isActive_;
      isValid_ = other.isValid_;
      switch (other.BindingCase) {
        case BindingOneofCase.LedgerId:
          LedgerId = other.LedgerId;
          break;
        case BindingOneofCase.FormId:
          FormId = other.FormId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Computation Clone() {
      return new Computation(this);
    }

    /// <summary>Field number for the "i18nKey" field.</summary>
    public const int I18NKeyFieldNumber = 1;
    private string i18NKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string I18NKey {
      get { return i18NKey_; }
      set {
        i18NKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inputVariables" field.</summary>
    public const int InputVariablesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::claros.protoc.Common.Computation.Variable> _repeated_inputVariables_codec
        = pb::FieldCodec.ForMessage(34, global::claros.protoc.Common.Computation.Variable.Parser);
    private readonly pbc::RepeatedField<global::claros.protoc.Common.Computation.Variable> inputVariables_ = new pbc::RepeatedField<global::claros.protoc.Common.Computation.Variable>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::claros.protoc.Common.Computation.Variable> InputVariables {
      get { return inputVariables_; }
    }

    /// <summary>Field number for the "outputVariables" field.</summary>
    public const int OutputVariablesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::claros.protoc.Common.Computation.Variable> _repeated_outputVariables_codec
        = pb::FieldCodec.ForMessage(42, global::claros.protoc.Common.Computation.Variable.Parser);
    private readonly pbc::RepeatedField<global::claros.protoc.Common.Computation.Variable> outputVariables_ = new pbc::RepeatedField<global::claros.protoc.Common.Computation.Variable>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::claros.protoc.Common.Computation.Variable> OutputVariables {
      get { return outputVariables_; }
    }

    /// <summary>Field number for the "expressionLines" field.</summary>
    public const int ExpressionLinesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::claros.protoc.Common.Computation.ExpressionLine> _repeated_expressionLines_codec
        = pb::FieldCodec.ForMessage(50, global::claros.protoc.Common.Computation.ExpressionLine.Parser);
    private readonly pbc::RepeatedField<global::claros.protoc.Common.Computation.ExpressionLine> expressionLines_ = new pbc::RepeatedField<global::claros.protoc.Common.Computation.ExpressionLine>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::claros.protoc.Common.Computation.ExpressionLine> ExpressionLines {
      get { return expressionLines_; }
    }

    /// <summary>Field number for the "isActive" field.</summary>
    public const int IsActiveFieldNumber = 7;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "isValid" field.</summary>
    public const int IsValidFieldNumber = 8;
    private bool isValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsValid {
      get { return isValid_; }
      set {
        isValid_ = value;
      }
    }

    /// <summary>Field number for the "ledgerId" field.</summary>
    public const int LedgerIdFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LedgerId {
      get { return bindingCase_ == BindingOneofCase.LedgerId ? (string) binding_ : ""; }
      set {
        binding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        bindingCase_ = BindingOneofCase.LedgerId;
      }
    }

    /// <summary>Field number for the "formId" field.</summary>
    public const int FormIdFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FormId {
      get { return bindingCase_ == BindingOneofCase.FormId ? (string) binding_ : ""; }
      set {
        binding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        bindingCase_ = BindingOneofCase.FormId;
      }
    }

    private object binding_;
    /// <summary>Enum of possible cases for the "binding" oneof.</summary>
    public enum BindingOneofCase {
      None = 0,
      LedgerId = 9,
      FormId = 10,
    }
    private BindingOneofCase bindingCase_ = BindingOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindingOneofCase BindingCase {
      get { return bindingCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBinding() {
      bindingCase_ = BindingOneofCase.None;
      binding_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Computation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Computation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (I18NKey != other.I18NKey) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if(!inputVariables_.Equals(other.inputVariables_)) return false;
      if(!outputVariables_.Equals(other.outputVariables_)) return false;
      if(!expressionLines_.Equals(other.expressionLines_)) return false;
      if (IsActive != other.IsActive) return false;
      if (IsValid != other.IsValid) return false;
      if (LedgerId != other.LedgerId) return false;
      if (FormId != other.FormId) return false;
      if (BindingCase != other.BindingCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (I18NKey.Length != 0) hash ^= I18NKey.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= inputVariables_.GetHashCode();
      hash ^= outputVariables_.GetHashCode();
      hash ^= expressionLines_.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (IsValid != false) hash ^= IsValid.GetHashCode();
      if (bindingCase_ == BindingOneofCase.LedgerId) hash ^= LedgerId.GetHashCode();
      if (bindingCase_ == BindingOneofCase.FormId) hash ^= FormId.GetHashCode();
      hash ^= (int) bindingCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (I18NKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(I18NKey);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      inputVariables_.WriteTo(output, _repeated_inputVariables_codec);
      outputVariables_.WriteTo(output, _repeated_outputVariables_codec);
      expressionLines_.WriteTo(output, _repeated_expressionLines_codec);
      if (IsActive != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsActive);
      }
      if (IsValid != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsValid);
      }
      if (bindingCase_ == BindingOneofCase.LedgerId) {
        output.WriteRawTag(74);
        output.WriteString(LedgerId);
      }
      if (bindingCase_ == BindingOneofCase.FormId) {
        output.WriteRawTag(82);
        output.WriteString(FormId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (I18NKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(I18NKey);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += inputVariables_.CalculateSize(_repeated_inputVariables_codec);
      size += outputVariables_.CalculateSize(_repeated_outputVariables_codec);
      size += expressionLines_.CalculateSize(_repeated_expressionLines_codec);
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (IsValid != false) {
        size += 1 + 1;
      }
      if (bindingCase_ == BindingOneofCase.LedgerId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LedgerId);
      }
      if (bindingCase_ == BindingOneofCase.FormId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FormId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Computation other) {
      if (other == null) {
        return;
      }
      if (other.I18NKey.Length != 0) {
        I18NKey = other.I18NKey;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      inputVariables_.Add(other.inputVariables_);
      outputVariables_.Add(other.outputVariables_);
      expressionLines_.Add(other.expressionLines_);
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      if (other.IsValid != false) {
        IsValid = other.IsValid;
      }
      switch (other.BindingCase) {
        case BindingOneofCase.LedgerId:
          LedgerId = other.LedgerId;
          break;
        case BindingOneofCase.FormId:
          FormId = other.FormId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            I18NKey = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            inputVariables_.AddEntriesFrom(input, _repeated_inputVariables_codec);
            break;
          }
          case 42: {
            outputVariables_.AddEntriesFrom(input, _repeated_outputVariables_codec);
            break;
          }
          case 50: {
            expressionLines_.AddEntriesFrom(input, _repeated_expressionLines_codec);
            break;
          }
          case 56: {
            IsActive = input.ReadBool();
            break;
          }
          case 64: {
            IsValid = input.ReadBool();
            break;
          }
          case 74: {
            LedgerId = input.ReadString();
            break;
          }
          case 82: {
            FormId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
