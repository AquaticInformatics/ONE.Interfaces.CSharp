// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: claros_instrument_measurement.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace claros.protoc.Instrument {

  /// <summary>Holder for reflection information generated from claros_instrument_measurement.proto</summary>
  public static partial class ClarosInstrumentMeasurementReflection {

    #region Descriptor
    /// <summary>File descriptor for claros_instrument_measurement.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClarosInstrumentMeasurementReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNjbGFyb3NfaW5zdHJ1bWVudF9tZWFzdXJlbWVudC5wcm90bxIRY2xhcm9z",
            "Lmluc3RydW1lbnQaJGNsYXJvc19jb21tb25fY29yZV9tZWFzdXJlbWVudC5w",
            "cm90bxodY2xhcm9zX2luc3RydW1lbnRfZXZlbnQucHJvdG8aG2NsYXJvc19j",
            "b21tb25fZ2lzX2dpcy5wcm90byLfAgoVSW5zdHJ1bWVudE1lYXN1cmVtZW50",
            "Eh8KF2luc3RydW1lbnRNZWFzdXJlbWVudElkGAEgASgJEg8KB2NoYW5uZWwY",
            "AiABKAUSEAoIZnVzaW9uSWQYAyABKAkSNAoLbWVhc3VyZW1lbnQYBCABKAsy",
            "Hy5jbGFyb3MuY29tbW9uLmNvcmUuTWVhc3VyZW1lbnQSSAoWc3VwcG9ydGlu",
            "Z01lYXN1cmVtZW50cxgFIAEoCzIoLmNsYXJvcy5pbnN0cnVtZW50Lkluc3Ry",
            "dW1lbnRNZWFzdXJlbWVudBIjCgNnaXMYBiABKAsyFi5jbGFyb3MuY29tbW9u",
            "Lmdpcy5HSVMSHwoXbWVhc3VyZW1lbnREYXRhRXh0ZW5kZWQYByABKAkSPAoQ",
            "bWVhc3VyZW1lbnRFdmVudBgIIAEoCzIiLmNsYXJvcy5pbnN0cnVtZW50Lklu",
            "c3RydW1lbnRFdmVudGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::claros.protoc.Common.Core.ClarosCommonCoreMeasurementReflection.Descriptor, global::claros.protoc.Instrument.ClarosInstrumentEventReflection.Descriptor, global::claros.protoc.Common.Gis.ClarosCommonGisGisReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::claros.protoc.Instrument.InstrumentMeasurement), global::claros.protoc.Instrument.InstrumentMeasurement.Parser, new[]{ "InstrumentMeasurementId", "Channel", "FusionId", "Measurement", "SupportingMeasurements", "Gis", "MeasurementDataExtended", "MeasurementEvent" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InstrumentMeasurement : pb::IMessage<InstrumentMeasurement> {
    private static readonly pb::MessageParser<InstrumentMeasurement> _parser = new pb::MessageParser<InstrumentMeasurement>(() => new InstrumentMeasurement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstrumentMeasurement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::claros.protoc.Instrument.ClarosInstrumentMeasurementReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentMeasurement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentMeasurement(InstrumentMeasurement other) : this() {
      instrumentMeasurementId_ = other.instrumentMeasurementId_;
      channel_ = other.channel_;
      fusionId_ = other.fusionId_;
      measurement_ = other.measurement_ != null ? other.measurement_.Clone() : null;
      supportingMeasurements_ = other.supportingMeasurements_ != null ? other.supportingMeasurements_.Clone() : null;
      gis_ = other.gis_ != null ? other.gis_.Clone() : null;
      measurementDataExtended_ = other.measurementDataExtended_;
      measurementEvent_ = other.measurementEvent_ != null ? other.measurementEvent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentMeasurement Clone() {
      return new InstrumentMeasurement(this);
    }

    /// <summary>Field number for the "instrumentMeasurementId" field.</summary>
    public const int InstrumentMeasurementIdFieldNumber = 1;
    private string instrumentMeasurementId_ = "";
    /// <summary>
    ///This is nullable.  In the case of Instrument Data this would be null until it reaches claros.protoc.Instrument.Measurement
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentMeasurementId {
      get { return instrumentMeasurementId_; }
      set {
        instrumentMeasurementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private int channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "fusionId" field.</summary>
    public const int FusionIdFieldNumber = 3;
    private string fusionId_ = "";
    /// <summary>
    /// This is optional and may be populated to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FusionId {
      get { return fusionId_; }
      set {
        fusionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "measurement" field.</summary>
    public const int MeasurementFieldNumber = 4;
    private global::claros.protoc.Common.Core.Measurement measurement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::claros.protoc.Common.Core.Measurement Measurement {
      get { return measurement_; }
      set {
        measurement_ = value;
      }
    }

    /// <summary>Field number for the "supportingMeasurements" field.</summary>
    public const int SupportingMeasurementsFieldNumber = 5;
    private global::claros.protoc.Instrument.InstrumentMeasurement supportingMeasurements_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::claros.protoc.Instrument.InstrumentMeasurement SupportingMeasurements {
      get { return supportingMeasurements_; }
      set {
        supportingMeasurements_ = value;
      }
    }

    /// <summary>Field number for the "gis" field.</summary>
    public const int GisFieldNumber = 6;
    private global::claros.protoc.Common.Gis.GIS gis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::claros.protoc.Common.Gis.GIS Gis {
      get { return gis_; }
      set {
        gis_ = value;
      }
    }

    /// <summary>Field number for the "measurementDataExtended" field.</summary>
    public const int MeasurementDataExtendedFieldNumber = 7;
    private string measurementDataExtended_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeasurementDataExtended {
      get { return measurementDataExtended_; }
      set {
        measurementDataExtended_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "measurementEvent" field.</summary>
    public const int MeasurementEventFieldNumber = 8;
    private global::claros.protoc.Instrument.InstrumentEvent measurementEvent_;
    /// <summary>
    /// Clean up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::claros.protoc.Instrument.InstrumentEvent MeasurementEvent {
      get { return measurementEvent_; }
      set {
        measurementEvent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstrumentMeasurement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstrumentMeasurement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentMeasurementId != other.InstrumentMeasurementId) return false;
      if (Channel != other.Channel) return false;
      if (FusionId != other.FusionId) return false;
      if (!object.Equals(Measurement, other.Measurement)) return false;
      if (!object.Equals(SupportingMeasurements, other.SupportingMeasurements)) return false;
      if (!object.Equals(Gis, other.Gis)) return false;
      if (MeasurementDataExtended != other.MeasurementDataExtended) return false;
      if (!object.Equals(MeasurementEvent, other.MeasurementEvent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstrumentMeasurementId.Length != 0) hash ^= InstrumentMeasurementId.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (FusionId.Length != 0) hash ^= FusionId.GetHashCode();
      if (measurement_ != null) hash ^= Measurement.GetHashCode();
      if (supportingMeasurements_ != null) hash ^= SupportingMeasurements.GetHashCode();
      if (gis_ != null) hash ^= Gis.GetHashCode();
      if (MeasurementDataExtended.Length != 0) hash ^= MeasurementDataExtended.GetHashCode();
      if (measurementEvent_ != null) hash ^= MeasurementEvent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstrumentMeasurementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstrumentMeasurementId);
      }
      if (Channel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Channel);
      }
      if (FusionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FusionId);
      }
      if (measurement_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Measurement);
      }
      if (supportingMeasurements_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SupportingMeasurements);
      }
      if (gis_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Gis);
      }
      if (MeasurementDataExtended.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MeasurementDataExtended);
      }
      if (measurementEvent_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(MeasurementEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstrumentMeasurementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentMeasurementId);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (FusionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FusionId);
      }
      if (measurement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Measurement);
      }
      if (supportingMeasurements_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SupportingMeasurements);
      }
      if (gis_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gis);
      }
      if (MeasurementDataExtended.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeasurementDataExtended);
      }
      if (measurementEvent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeasurementEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstrumentMeasurement other) {
      if (other == null) {
        return;
      }
      if (other.InstrumentMeasurementId.Length != 0) {
        InstrumentMeasurementId = other.InstrumentMeasurementId;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.FusionId.Length != 0) {
        FusionId = other.FusionId;
      }
      if (other.measurement_ != null) {
        if (measurement_ == null) {
          Measurement = new global::claros.protoc.Common.Core.Measurement();
        }
        Measurement.MergeFrom(other.Measurement);
      }
      if (other.supportingMeasurements_ != null) {
        if (supportingMeasurements_ == null) {
          SupportingMeasurements = new global::claros.protoc.Instrument.InstrumentMeasurement();
        }
        SupportingMeasurements.MergeFrom(other.SupportingMeasurements);
      }
      if (other.gis_ != null) {
        if (gis_ == null) {
          Gis = new global::claros.protoc.Common.Gis.GIS();
        }
        Gis.MergeFrom(other.Gis);
      }
      if (other.MeasurementDataExtended.Length != 0) {
        MeasurementDataExtended = other.MeasurementDataExtended;
      }
      if (other.measurementEvent_ != null) {
        if (measurementEvent_ == null) {
          MeasurementEvent = new global::claros.protoc.Instrument.InstrumentEvent();
        }
        MeasurementEvent.MergeFrom(other.MeasurementEvent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstrumentMeasurementId = input.ReadString();
            break;
          }
          case 16: {
            Channel = input.ReadInt32();
            break;
          }
          case 26: {
            FusionId = input.ReadString();
            break;
          }
          case 34: {
            if (measurement_ == null) {
              Measurement = new global::claros.protoc.Common.Core.Measurement();
            }
            input.ReadMessage(Measurement);
            break;
          }
          case 42: {
            if (supportingMeasurements_ == null) {
              SupportingMeasurements = new global::claros.protoc.Instrument.InstrumentMeasurement();
            }
            input.ReadMessage(SupportingMeasurements);
            break;
          }
          case 50: {
            if (gis_ == null) {
              Gis = new global::claros.protoc.Common.Gis.GIS();
            }
            input.ReadMessage(Gis);
            break;
          }
          case 58: {
            MeasurementDataExtended = input.ReadString();
            break;
          }
          case 66: {
            if (measurementEvent_ == null) {
              MeasurementEvent = new global::claros.protoc.Instrument.InstrumentEvent();
            }
            input.ReadMessage(MeasurementEvent);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
