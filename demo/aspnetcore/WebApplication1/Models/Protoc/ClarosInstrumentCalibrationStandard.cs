// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: claros_instrument_calibration_standard.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace claros.protoc.Instrument {

  /// <summary>Holder for reflection information generated from claros_instrument_calibration_standard.proto</summary>
  public static partial class ClarosInstrumentCalibrationStandardReflection {

    #region Descriptor
    /// <summary>File descriptor for claros_instrument_calibration_standard.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClarosInstrumentCalibrationStandardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixjbGFyb3NfaW5zdHJ1bWVudF9jYWxpYnJhdGlvbl9zdGFuZGFyZC5wcm90",
            "bxIRY2xhcm9zLmluc3RydW1lbnQaKWNsYXJvc19pbnN0cnVtZW50X2NhbGli",
            "cmF0aW9uX3ZhbHVlLnByb3RvIsgBChNDYWxpYnJhdGlvblN0YW5kYXJkEjcK",
            "Cmtub3duVmFsdWUYASABKAsyIy5jbGFyb3MuaW5zdHJ1bWVudC5DYWxpYnJh",
            "dGlvblZhbHVlEjoKDW1lYXN1cmVkVmFsdWUYAiABKAsyIy5jbGFyb3MuaW5z",
            "dHJ1bWVudC5DYWxpYnJhdGlvblZhbHVlEjwKD3NlY29uZGFyeVZhbHVlcxgE",
            "IAMoCzIjLmNsYXJvcy5pbnN0cnVtZW50LkNhbGlicmF0aW9uVmFsdWViBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::claros.protoc.Instrument.ClarosInstrumentCalibrationValueReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::claros.protoc.Instrument.CalibrationStandard), global::claros.protoc.Instrument.CalibrationStandard.Parser, new[]{ "KnownValue", "MeasuredValue", "SecondaryValues" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CalibrationStandard : pb::IMessage<CalibrationStandard> {
    private static readonly pb::MessageParser<CalibrationStandard> _parser = new pb::MessageParser<CalibrationStandard>(() => new CalibrationStandard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalibrationStandard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::claros.protoc.Instrument.ClarosInstrumentCalibrationStandardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalibrationStandard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalibrationStandard(CalibrationStandard other) : this() {
      knownValue_ = other.knownValue_ != null ? other.knownValue_.Clone() : null;
      measuredValue_ = other.measuredValue_ != null ? other.measuredValue_.Clone() : null;
      secondaryValues_ = other.secondaryValues_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalibrationStandard Clone() {
      return new CalibrationStandard(this);
    }

    /// <summary>Field number for the "knownValue" field.</summary>
    public const int KnownValueFieldNumber = 1;
    private global::claros.protoc.Instrument.CalibrationValue knownValue_;
    /// <summary>
    ///this is the primary value  (Concentration)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::claros.protoc.Instrument.CalibrationValue KnownValue {
      get { return knownValue_; }
      set {
        knownValue_ = value;
      }
    }

    /// <summary>Field number for the "measuredValue" field.</summary>
    public const int MeasuredValueFieldNumber = 2;
    private global::claros.protoc.Instrument.CalibrationValue measuredValue_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::claros.protoc.Instrument.CalibrationValue MeasuredValue {
      get { return measuredValue_; }
      set {
        measuredValue_ = value;
      }
    }

    /// <summary>Field number for the "secondaryValues" field.</summary>
    public const int SecondaryValuesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::claros.protoc.Instrument.CalibrationValue> _repeated_secondaryValues_codec
        = pb::FieldCodec.ForMessage(34, global::claros.protoc.Instrument.CalibrationValue.Parser);
    private readonly pbc::RepeatedField<global::claros.protoc.Instrument.CalibrationValue> secondaryValues_ = new pbc::RepeatedField<global::claros.protoc.Instrument.CalibrationValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::claros.protoc.Instrument.CalibrationValue> SecondaryValues {
      get { return secondaryValues_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalibrationStandard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalibrationStandard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(KnownValue, other.KnownValue)) return false;
      if (!object.Equals(MeasuredValue, other.MeasuredValue)) return false;
      if(!secondaryValues_.Equals(other.secondaryValues_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (knownValue_ != null) hash ^= KnownValue.GetHashCode();
      if (measuredValue_ != null) hash ^= MeasuredValue.GetHashCode();
      hash ^= secondaryValues_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (knownValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(KnownValue);
      }
      if (measuredValue_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MeasuredValue);
      }
      secondaryValues_.WriteTo(output, _repeated_secondaryValues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (knownValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KnownValue);
      }
      if (measuredValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeasuredValue);
      }
      size += secondaryValues_.CalculateSize(_repeated_secondaryValues_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalibrationStandard other) {
      if (other == null) {
        return;
      }
      if (other.knownValue_ != null) {
        if (knownValue_ == null) {
          KnownValue = new global::claros.protoc.Instrument.CalibrationValue();
        }
        KnownValue.MergeFrom(other.KnownValue);
      }
      if (other.measuredValue_ != null) {
        if (measuredValue_ == null) {
          MeasuredValue = new global::claros.protoc.Instrument.CalibrationValue();
        }
        MeasuredValue.MergeFrom(other.MeasuredValue);
      }
      secondaryValues_.Add(other.secondaryValues_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (knownValue_ == null) {
              KnownValue = new global::claros.protoc.Instrument.CalibrationValue();
            }
            input.ReadMessage(KnownValue);
            break;
          }
          case 18: {
            if (measuredValue_ == null) {
              MeasuredValue = new global::claros.protoc.Instrument.CalibrationValue();
            }
            input.ReadMessage(MeasuredValue);
            break;
          }
          case 34: {
            secondaryValues_.AddEntriesFrom(input, _repeated_secondaryValues_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
